Bom dia! Vamos montar um projeto que consiste em uma API que pode ser acessada por um link que abre uma janela com v√°rios bot√µes, sendo que cada bot√£o ter√° uma finalidade especifica. O primeiro ser√° um chatbot que ler√° um formul√°rio de peti√ß√£o em pdf (chatbot-fp1.py);  o segundo ser√° um chatbot que ler√° um arquivo em pdf (RPP - Relat√≥rios de Revis√£o Periodica); o terceiro ser√° um web-scrapping que buscar√° dados espec√≠ficos (resultados de inspe√ß√µes realizadas por estas institui√ß√µes) de websites do FDA, do EMA e do Health Canad√°.

Bom dia, Carlos! Esse projeto tem tudo para ser extremamente √∫til e multifuncional ‚Äî unir automa√ß√£o de leitura de PDFs com intelig√™ncia artificial e coleta de dados web √© uma combina√ß√£o poderosa. Vamos estruturar os blocos principais da aplica√ß√£o para que tudo se encaixe com fluidez. Aqui vai uma proposta de arquitetura inicial:

üß© Estrutura Geral do Projeto
üîó Interface Web (Janela com Bot√µes)
- Desenvolvida com Flask ou FastAPI com frontend em HTML + JavaScript (ex: Bootstrap).
- Cada bot√£o aciona uma rota espec√≠fica na API que chama um m√≥dulo correspondente.
[Formul√°rio de Peti√ß√£o] ‚Üí chatbot-fp1.py  
[RPP - Relat√≥rios de Revis√£o] ‚Üí chatbot-rpp.py  
[Inspe√ß√µes FDA/EMA/HC] ‚Üí webscraping-inspecoes.py



ü§ñ Bot√£o 1: Chatbot para Formul√°rio de Peti√ß√£o (PDF)
Fun√ß√£o:
- Ler e interpretar formul√°rios de peti√ß√£o em PDF.
- Gerar respostas inteligentes ou extrair informa√ß√µes estruturadas.
Componentes:
- PDF parser (ex: PyMuPDF ou pdfplumber)
- Modelo de linguagem (ex: OpenAI ou Hugging Face para entendimento do texto)
- Interface de chat tipo chatbot (streamlit/chat-ui com backend Python)

üìä Bot√£o 2: Chatbot para Relat√≥rio de Revis√£o Peri√≥dica (RPP)
Fun√ß√£o:
- Ler arquivos RPP em PDF.
- Realizar perguntas e respostas interativas sobre conte√∫do do relat√≥rio.
Componentes:
- Mesmo stack do Bot√£o 1, com poss√≠veis adapta√ß√µes na l√≥gica de extra√ß√£o:
- Extra√ß√£o de datas, conclus√µes, indicadores.

üåê Bot√£o 3: Web Scraping FDA / EMA / Health Canada
Fun√ß√£o:
- Buscar dados sobre inspe√ß√µes de medicamentos ou fabricantes nos sites oficiais.
- Compilar e apresentar dados de forma organizada.
Fontes:
- FDA Inspection Database
- EMA GCP & GMP Inspection Reports
- Health Canada Inspection Tracker
Ferramentas sugeridas:
- BeautifulSoup + requests para scraping simples.
- Selenium se for necess√°rio interagir com p√°ginas din√¢micas.
- pandas para organizar e exportar os dados.

üóÇ Organiza√ß√£o dos Arquivos
/ProjetoAPI
‚îÇ
‚îú‚îÄ‚îÄ api.py                # Arquivo principal da API
‚îú‚îÄ‚îÄ chatbot-fp1.py        # Chatbot do formul√°rio de peti√ß√£o
‚îú‚îÄ‚îÄ chatbot-rpp.py        # Chatbot dos relat√≥rios RPP
‚îú‚îÄ‚îÄ webscraping-inspecoes.py # Scraper FDA/EMA/HC
‚îú‚îÄ‚îÄ static/               # CSS, JS, √≠cones
‚îú‚îÄ‚îÄ templates/            # HTML dos bot√µes e interface
‚îî‚îÄ‚îÄ uploads/              # PDFs recebidos



Se quiser, podemos come√ßar escrevendo um dos m√≥dulos juntos. O que voc√™ prefere come√ßar: o chatbot dos formul√°rios ou o web scraping internacional?

----------------------------------------------------------------------
Claro, Carlos! Aqui est√£o os links diretos para os respectivos sistemas de inspe√ß√£o de cada entidade reguladora:

üß™ FDA (Food and Drug Administration ‚Äì EUA)
- üîó FDA Inspection Classification Database
- üîó FDA Inspections Dashboard
Esses portais permitem buscar inspe√ß√µes por empresa, tipo de produto, classifica√ß√£o (NAI, VAI, OAI) e visualizar relat√≥rios como o Form 483.

üá™üá∫ EMA (European Medicines Agency ‚Äì Uni√£o Europeia)
- üîó EMA GCP Inspection Procedures
- üîó EMA Annual Report ‚Äì Inspections and Compliance
A EMA coordena inspe√ß√µes de GCP e GMP em colabora√ß√£o com autoridades nacionais. Os relat√≥rios s√£o publicados em forma de m√©tricas e documentos t√©cnicos.

üçÅ Health Canada (Canad√°)
- üîó Health Canada Inspection Tracker
- üîó Drug & Health Product Inspections Database
O tracker canadense mostra a√ß√µes regulat√≥rias em andamento, como quarentenas volunt√°rias, restri√ß√µes de importa√ß√£o e recalls.

Se quiser, posso te ajudar a montar o scraper para cada um desses sites. Qual deles voc√™ quer come√ßar a explorar?

FDA Inspection Resources
| Portal | Descri√ß√£o | Link | 
| Inspection Classification Database | Mostra classifica√ß√µes finais de inspe√ß√µes (NAI, VAI, OAI) por √°rea de projeto. Ideal para entender o status de conformidade de fabricantes. | Acesse aqui | 
| FDA Inspections Dashboard | Interface visual com filtros por tipo de produto, pa√≠s, ano fiscal, e acesso a Formul√°rios 483 publicados. | Explore o dashboard | 



Esses sites s√£o atualizados semanalmente e oferecem dados p√∫blicos sobre inspe√ß√µes realizadas em estabelecimentos regulados. Voc√™ pode buscar por nome da empresa, pa√≠s, tipo de produto, e at√© baixar datasets.
Se quiser, posso te ajudar a come√ßar o c√≥digo de scraping para um deles. Quer que eu monte um exemplo com requests e BeautifulSoup para o Dashboard?


 Exemplo de Web Scraping com Selenium (FDA Dashboard)
‚úÖ Pr√©-requisitos:
Antes de tudo, certifique-se de instalar os pacotes:
pip install selenium pandas


E tenha o ChromeDriver compat√≠vel com sua vers√£o do Chrome.

üìú C√≥digo Python Inicial
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
import pandas as pd
import time

# Caminho do ChromeDriver
service = Service("CAMINHO/para/chromedriver.exe")

# Configura√ß√£o do navegador
options = webdriver.ChromeOptions()
options.add_argument("--headless")  # Executa sem abrir janela
driver = webdriver.Chrome(service=service, options=options)

# Acessa o Dashboard
url = "https://datadashboard.fda.gov/oii/cd/inspections.htm"
driver.get(url)
time.sleep(5)  # Aguarda carregamento da p√°gina

# Exemplo: Captura t√≠tulos das se√ß√µes de filtros
titles = driver.find_elements(By.CLASS_NAME, "card-title")
for t in titles:
    print("T√≠tulo:", t.text)

# Exemplo: Captura uma tabela (se presente)
try:
    table = driver.find_element(By.ID, "example-table")  # ID fict√≠cio
    rows = table.find_elements(By.TAG_NAME, "tr")
    for row in rows:
        cols = row.find_elements(By.TAG_NAME, "td")
        data = [col.text for col in cols]
        print(data)
except:
    print("Tabela n√£o localizada ou conte√∫do din√¢mico ainda n√£o carregado.")

driver.quit()

Ó∑õÓ∑ú

üß† Dica:
Como o conte√∫do √© carregado dinamicamente, voc√™ pode usar tamb√©m o driver.execute_script() para capturar informa√ß√µes JavaScript ou interagir com bot√µes/filtros.
Se quiser, posso adaptar esse script para extrair inspe√ß√µes por pa√≠s ou mostrar a classifica√ß√£o (OAI, VAI, NAI) diretamente. Quer que avancemos nisso?

 Etapa 1: Simula√ß√£o de Intera√ß√£o + Coleta de Dados
Aqui est√° um exemplo mais elaborado para:
- Abrir o FDA Dashboard
- Selecionar filtros (como pa√≠s)
- Coletar dados da tabela de inspe√ß√µes
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support impo

-----------------------------------------------------------------------
BUSCA NO SITE DO FDA POR NOME OU FEI 

Perfeito! Vamos montar um m√≥dulo que aceita o nome da empresa ou o n√∫mero FEI como entrada e retorna os dados dispon√≠veis no portal FDA Firm/Supplier Evaluation Resources.
Como o site √© altamente din√¢mico, usaremos novamente o Selenium para simular a busca.

üß™ Script de Busca por Empresa ou FEI no FDA Dashboard
üîß Pr√©-requisitos
pip install selenium pandas



üìú C√≥digo Python Base
 

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import pandas as pd
import time

# ‚Üê Atualize com seu caminho local do chromedriver
service = Service("CAMINHO/para/chromedriver.exe")
options = webdriver.ChromeOptions()
options.add_argument("--headless")

# Inicializa navegador
driver = webdriver.Chrome(service=service, options=options)
wait = WebDriverWait(driver, 15)

# URL da ferramenta FDA
url = "https://datadashboard.fda.gov/oii/fd/fser.htm"
driver.get(url)
time.sleep(5)

# --- Entrar com nome da empresa ou FEI ---
empresa_ou_fei = "Pfizer"  # ‚Üê substitua pelo nome ou n√∫mero FEI desejado

# Localiza campo de busca e insere valor
try:
    campo_busca = wait.until(EC.presence_of_element_located((By.ID, "searchInput")))  # ‚Üê confirmar o ID real
    campo_busca.clear()
    campo_busca.send_keys(empresa_ou_fei)
    time.sleep(2)

    botao_buscar = driver.find_element(By.ID, "searchButton")  # ‚Üê confirmar o ID real
    botao_buscar.click()
    time.sleep(8)

    # Captura resultados da tabela
    resultados = driver.find_elements(By.CLASS_NAME, "result-row")  # ‚Üê ajustar para estrutura real
    for item in resultados:
        print(item.text)

except Exception as e:
    print("Erro ao buscar empresa:", e)

driver.quit()


 Adapta√ß√µes Futuras
Se quiser transformar isso em uma API para seu projeto, podemos:
- Receber os dados via POST de formul√°rio HTML.
- Retornar os dados como JSON.
- Incorporar cache para buscas frequentes.
- Tratar erros e buscas inv√°lidas.
Quer que a gente transforme esse script em uma fun√ß√£o reutiliz√°vel dentro da sua API Flask ou FastAPI? Posso te ajudar com isso tamb√©m!

========================================================================
BUSCA NO SITE DO EMA

Perfeito, Carlos! Vamos focar exclusivamente no portal do EMA para buscar dados de autoriza√ß√µes MIA (Manufacturing and Importation Authorisation) usando nome da empresa, pa√≠s e/ou n√∫mero MIA.

üåç Portal Oficial do EMA para MIA
üîó EudraGMDP ‚Äì Search MIA
Esse √© o site onde voc√™ pode realizar buscas detalhadas por:
- Nome da empresa (com uso de coringas como *Pharma*)
- Pa√≠s de emiss√£o
- N√∫mero MIA
- Cidade, c√≥digo postal, DUNS Number, OMS Organisation ID
- Tipo de opera√ß√£o autorizada (ex: fabrica√ß√£o, importa√ß√£o)
- Legal Basis of Authorisation (ex: Art. 40 da Diretiva 2001/83/EC)

üõ†Ô∏è Como funciona a busca
- Voc√™ pode usar asteriscos como coringas:
- *Inc. ‚Üí empresas que terminam com ‚ÄúInc.‚Äù
- Pharmaco* ‚Üí empresas que come√ßam com ‚ÄúPharmaco‚Äù
- Se n√£o preencher nenhum campo, o sistema retorna todas as MIAs do pa√≠s selecionado.
- √â poss√≠vel incluir MIAs retiradas ou suspensas marcando as caixas correspondentes.
- Os resultados podem ser exportados em Excel diretamente da interface.

üí° Pr√≥ximo passo
Posso montar um script com Selenium que:
- Aceita como entrada o nome da empresa, pa√≠s ou n√∫mero MIA
- Realiza a busca no site
- Extrai os resultados da tabela
- Retorna como DataFrame ou JSON para sua API
Quer que eu comece esse m√≥dulo agora? Posso te entregar um exemplo funcional rapidinho! üòÑ

Script de Busca de MIA no Portal da EMA
üöÄ Pr√©-requisitos
Instale os pacotes:
pip install selenium pandas


Garanta tamb√©m que o ChromeDriver esteja instalado e compat√≠vel com sua vers√£o do Chrome.

üß™ C√≥digo Python Inicial
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
import pandas as pd
import time

# Par√¢metros de busca
empresa = "Pfizer"
pais = "Germany"
numero_mia = ""  # Se quiser buscar pelo n√∫mero, insira aqui

# Caminho do ChromeDriver
service = Service("CAMINHO/para/chromedriver.exe")
options = webdriver.ChromeOptions()
options.add_argument("--headless")

# Inicializa navegador
driver = webdriver.Chrome(service=service, options=options)

# Acessa o site
url = "https://eudragmdp.ema.europa.eu/inspections/mia/searchMIA.do"
driver.get(url)
time.sleep(3)

# Preenche o campo de nome da empresa
driver.find_element(By.NAME, "companyName").send_keys(empresa)

# Seleciona o pa√≠s
select_country = Select(driver.find_element(By.NAME, "country"))
select_country.select_by_visible_text(pais)

# N√∫mero MIA (opcional)
if numero_mia:
    driver.find_element(By.NAME, "miaNumber").send_keys(numero_mia)

# Clica no bot√£o de busca
driver.find_element(By.NAME, "submit").click()
time.sleep(5)

# Extrai dados da tabela
rows = driver.find_elements(By.CSS_SELECTOR, "table.reportTable > tbody > tr")

dados = []
for row in rows[1:]:  # Ignora cabe√ßalho
    cols = row.find_elements(By.TAG_NAME, "td")
    dados.append([col.text.strip() for col in cols])

# Cria DataFrame
colunas = ["Company Name", "MIA Number", "Address", "City", "Postal Code", "Country", "Type of Authorisation", "Operations"]
df = pd.DataFrame(dados, columns=colunas)
print(df.head())

driver.quit()

Ó∑õÓ∑úÓ∑ôÓ∑ö

üß† Dicas Futuras
- Podemos transformar esse script em um endpoint de API que retorna JSON com os dados da MIA.
- √â poss√≠vel expandir para capturar tamb√©m documentos PDF de inspe√ß√£o vinculados, se dispon√≠veis.
- Podemos incluir filtros adicionais (como tipo de opera√ß√£o autorizada ou status do MIA).
Quer que a gente transforme isso em um m√≥dulo oficial da sua API com entrada via formul√°rio web? Posso seguir com isso e integrar os dados na interface que mencionou! üß±üì°

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
import pandas as pd
import time

# Par√¢metros de busca
empresa = "Pfizer"
pais = "Germany"
numero_mia = ""  # Se quiser buscar pelo n√∫mero, insira aqui

# Caminho do ChromeDriver
service = Service("CAMINHO/para/chromedriver.exe")
options = webdriver.ChromeOptions()
options.add_argument("--headless")

# Inicializa navegador
driver = webdriver.Chrome(service=service, options=options)

# Acessa o site
url = "https://eudragmdp.ema.europa.eu/inspections/mia/searchMIA.do"
driver.get(url)
time.sleep(3)

# Preenche o campo de nome da empresa
driver.find_element(By.NAME, "companyName").send_keys(empresa)

# Seleciona o pa√≠s
select_country = Select(driver.find_element(By.NAME, "country"))
select_country.select_by_visible_text(pais)

# N√∫mero MIA (opcional)
if numero_mia:
    driver.find_element(By.NAME, "miaNumber").send_keys(numero_mia)

# Clica no bot√£o de busca
driver.find_element(By.NAME, "submit").click()
time.sleep(5)

# Extrai dados da tabela
rows = driver.find_elements(By.CSS_SELECTOR, "table.reportTable > tbody > tr")

dados = []
for row in rows[1:]:  # Ignora cabe√ßalho
    cols = row.find_elements(By.TAG_NAME, "td")
    dados.append([col.text.strip() for col in cols])

# Cria DataFrame
colunas = ["Company Name", "MIA Number", "Address", "City", "Postal Code", "Country", "Type of Authorisation", "Operations"]
df = pd.DataFrame(dados, columns=colunas)
print(df.head())

driver.quit()

Dicas Futuras
- Podemos transformar esse script em um endpoint de API que retorna JSON com os dados da MIA.
- √â poss√≠vel expandir para capturar tamb√©m documentos PDF de inspe√ß√£o vinculados, se dispon√≠veis.
- Podemos incluir filtros adicionais (como tipo de opera√ß√£o autorizada ou status do MIA).
Quer que a gente transforme isso em um m√≥dulo oficial da sua API com entrada via formul√°rio web? Posso seguir com isso e integrar os dados na interface que mencionou! üß±üì°

/////////////////////////////////////////////////////////////////////////////////////

üóÇ Organiza√ß√£o dos Arquivos
/ProjetoAPI
‚îÇ
‚îú‚îÄ‚îÄ api.py                # Arquivo principal da API
‚îú‚îÄ‚îÄ chatbot-fp1.py        # Chatbot do formul√°rio de peti√ß√£o
‚îú‚îÄ‚îÄ chatbot-rpp.py        # Chatbot dos relat√≥rios RPP
‚îú‚îÄ‚îÄ webscraping-inspecoes.py # Scraper FDA/EMA/HC
‚îú‚îÄ‚îÄ static/               # CSS, JS, √≠cones
‚îú‚îÄ‚îÄ templates/            # HTML dos bot√µes e interface
‚îî‚îÄ‚îÄ uploads/              # PDFs recebidos



COMMITS - 30/07/2025

- Altera√ß√£o do nome da pasta de chatbot-pdf para AnalisePeticoes, o nome do projeto.
- Estrutura√ß√£o das pastas que compora√ß√£o o projeto 
- Subpastas criadas: static/, templates/ e uploads/
- arquivos criados: api.py, chatbot-fp1.py, chatbot-rpp.py e ebscraping-hii.py (hii - hist√≥rico inspe√ßoes internacionais)